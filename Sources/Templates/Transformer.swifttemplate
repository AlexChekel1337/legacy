<%_
//
// Transformer
// EE Utilities
//
// Copyright (c) 2017 Eugene Egorov.
// License: MIT, https://github.com/eugeneego/utilities-ios/blob/master/LICENSE
//

func cleanTypeName(_ s: String) -> String {
    return s.replacingOccurrences(of: ".", with: "")
}

func stringAnnotation(_ object: Annotated, _ name: String, _ default: String) -> String {
    return object.annotations[name] as? String ?? `default`
}

func transformer(for type: String, from: String = "Any") -> String {
    let casts = Set([ "String", "Int", "Int8", "Int16", "Int16", "Int32", "Int64", "UInt", "UInt8", "UInt16", "UInt16", "UInt32", "UInt64", "Float", "Double", "CGFloat", "TimeInterval", "Bool" ])
    if casts.contains(type) {
        return "CastTransformer<\(from), \(type)>"
    } else {
        return "\(type)Transformer<\(from)>"
    }
}

func enumValueTransformer(for type: Enum, from: String = "Any") -> String? {
    if let rawTransformer = type.annotations["enumTransformer.transformer"] as? String {
        return rawTransformer
    } else if let rawType = type.annotations["enumTransformer.type"] as? String {
        return transformer(for: cleanTypeName(rawType), from: from) + "()"
    } else if let rawType = type.rawType {
        return transformer(for: cleanTypeName(rawType.name), from: from) + "()"
    }
    return nil
}

func enumRawValue(for enumCase: EnumCase) -> String {
    if let string = enumCase.annotations["enumTransformer.value"] as? String {
        return "\"\(string)\""
    } else if let int = enumCase.annotations["enumTransformer.value"] as? Int {
        return "\(int)"
    } else {
        return enumCase.rawValue ?? "\"\(enumCase.name)\""
    }
}
-%>
<%# Enum Transformers -%>
<%
for type in types.enums where type.annotations["enumTransformer"] != nil {
    let name = stringAnnotation(type, "name", cleanTypeName(type.name) + "Transformer")
    let variables = type.storedVariables
-%>
// sourcery:file:<%= name %>.swift
import Foundation
import EEUtilities

<%_ if type.hasAssociatedValues { -%>
// Enums with associated values are not supported.
// sourcery:end
<%_ continue } -%>
<%_ guard let valueTransformer = enumValueTransformer(for: type, from: "From") else { -%>
// No raw type detected.
// sourcery:end
<%_ continue } -%>
struct <%= name %><From>: FullTransformer {
    typealias Source = From
    typealias Destination = <%= type.name %>

    private let transformer = <%= valueTransformer %>

    func transform(source value: Source) -> TransformerResult<Destination> {
        guard let rawValue = transformer.transform(source: value).value else { return .failure(.transform) }

        switch rawValue {
            <%_ for enumCase in type.cases { -%>
            case <%= enumRawValue(for: enumCase) %>:
                return .success(.<%= enumCase.name %>)
            <%_ } -%>
            default:
                return .failure(.transform)
        }
    }

    func transform(destination value: Destination) -> TransformerResult<Source> {
        switch value {
            <%_ for enumCase in type.cases { -%>
            case .<%= enumCase.name %>:
                return transformer.transform(destination: <%= enumRawValue(for: enumCase) %>)
            <%_ } -%>
        }
    }
}

// sourcery:end
<% } -%>
<%# Object Transformers -%>
<%
for type in types.all where type.annotations["transformer"] != nil {
    let name = stringAnnotation(type, "name", cleanTypeName(type.name) + "Transformer")
    let variables = type.storedVariables
-%>
// sourcery:file:<%= name %>.swift
import Foundation
import CoreGraphics
import EEUtilities

// swiftlint:disable line_length
struct <%= name %>: FullTransformer {
    typealias Source = Any
    typealias Destination = <%= type.name %>

    <%_ for variable in variables { -%>
    let <%= variable.name %>Name = "<%= stringAnnotation(variable, "name", variable.name) %>"
    <%_ } -%>

    <%_ for variable in variables {
        var variableTransformer: String
        if let annotatedTransformer = variable.annotations["transformer"] as? String {
            variableTransformer = annotatedTransformer
        } else if variable.isArray, let arrayType = variable.typeName.array {
            variableTransformer = transformer(for: cleanTypeName(arrayType.elementTypeName.name)) + "()"
        } else if variable.isOptional {
            variableTransformer = transformer(for: cleanTypeName(variable.unwrappedTypeName)) + "()"
        } else {
            variableTransformer = transformer(for: cleanTypeName(variable.type?.name ?? variable.typeName.name)) + "()"
        }
        if variable.isArray, let arrayType = variable.typeName.array {
            variableTransformer = "ArrayTransformer(transformer: \(variableTransformer), skipElements: true)"
        } else if variable.isOptional {
            variableTransformer = "OptionalTransformer(transformer: \(variableTransformer))"
        } -%>
    let <%= variable.name %>Transformer = <%= variableTransformer %>
    <%_ } -%>

    func transform(source value: Source) -> TransformerResult<Destination> {
        guard let dictionary: [String: Any] = CastTransformer().transform(source: value).value else { return .failure(.badDictionary) }

        <%_ for variable in variables { -%>
            <%_ if variable.isOptional { -%>
        let <%= variable.name %>Result = <%= variable.name %>Transformer.transform(source: dictionary[<%= variable.name %>Name])
            <%_ } else { -%>
        let <%= variable.name %>Result = dictionary[<%= variable.name %>Name].map(<%= variable.name %>Transformer.transform(source:)) ?? .failure(.requirement)
            <%_ } -%>
        <%_ } -%>

        var errors: [(String, TransformerError)] = []
        <%_ for variable in variables { -%>
        <%= variable.name %>Result.error.map { errors.append((<%= variable.name %>Name, $0)) }
        <%_ } -%>

        guard
            <%_ for variable in variables { -%>
            let <%= variable.name %> = <%= variable.name %>Result.value,
            <%_ } -%>
            errors.isEmpty
        else {
            return .failure(.multiple(errors))
        }

        <%_ for variable in variables where variable.annotations["validate"] != nil { -%>
            <%_ if let validate = variable.annotations["validate"] as? String, !validate.isEmpty { -%>
        if let error = <%= validate %>(<%= variable.name %>) { errors.append((<%= variable.name %>Name, .validation(error))) }
            <%_ } -%>
        <%_ } -%>

        return .success(
            Destination(
                <%_ for (index, variable) in variables.enumerated() { -%>
                <%= variable.name %>: <%= variable.name %><%= index != variables.count - 1 ? "," : "" %>
                <%_ } -%>
            )
        )
    }

    func transform(destination value: Destination) -> TransformerResult<Source> {
        <%_ for variable in variables { -%>
        let <%= variable.name %>Result = <%= variable.name %>Transformer.transform(destination: value.<%= variable.name %>)
        <%_ } -%>

        var errors: [(String, TransformerError)] = []
        <%_ for variable in variables { -%>
        <%= variable.name %>Result.error.map { errors.append((<%= variable.name %>Name, $0)) }
        <%_ } -%>

        guard
            <%_ for variable in variables { -%>
            let <%= variable.name %> = <%= variable.name %>Result.value,
            <%_ } -%>
            errors.isEmpty
        else {
            return .failure(.multiple(errors))
        }

        var dictionary: [String: Any] = [:]
        <%_ for variable in variables { -%>
        dictionary[<%= variable.name %>Name] = <%= variable.name %>
        <%_ } -%>
        return .success(dictionary)
    }
}
// swiftlint:enable line_length

// sourcery:end
<% } -%>
